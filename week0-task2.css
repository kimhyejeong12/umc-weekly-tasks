.container {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr; 
  grid-template-rows: 60px 250px 100px 100px 80px;
  gap: 0; /* 칸 사이 간격*/
  width: 100%;
  height: 500px;
}

.table {
  display: flex; 
  justify-content: center; 
  align-items: center;
  font-size: 20px
  
}

.header {
  grid-row: 1 ;grid-column: 1 ;
  color: white;
  background-color: black; 
}

.memu {
  grid-row: 1 ;
  grid-column: 2 / 5;
  color: white;
  background-color: tomato; 
}

.hero {
  grid-row: 2;
  grid-column: 1 / 5;
  color: white;
  background-color: blue;
}

.main {
  grid-row: 3 / 5;
  grid-column: 1 / 3;
  color: white;
  background-color: navy; 
}

.image {
  grid-row: 3 / 4;
  grid-column: 4;
  color: black;
  background-color: mediumseagreen; 
}

.extra {
  grid-row: 4 ;
  grid-column: 4;
  background-color: green;
}

.banner {
  grid-row:  5;
  grid-column: 1 / 5;
  background-color: yellow; 
}

/*
✅CSS Grid 관련 속성
display: grid; → Grid 레이아웃을 사용하도록 설정

grid-template-columns: 1fr 1fr 1fr 1fr; → 4개의 동일한 너비의 열을 생성

grid-template-rows: 60px 250px 100px 100px 80px; → 각 행의 높이 설정

gap: 10; → 그리드 셀 사이 간격을 설정 (⚠️ 숫자만 작성하면 오류 발생 가능, gap: 10px;으로 수정 필요)

grid-row: x / y; → 그리드 행의 시작과 끝을 지정

grid-column: x / y; → 그리드 열의 시작과 끝을 지정
grid-column: 1 / 5;
→ "1번 선(시작)에서 5번 선(끝)까지 차지한다" 라는 뜻
CSS Grid는 "셀(열)"이 아니라 "선(line)"을 기준으로 동작해.

✅ Flexbox 관련 속성 (.table)
display: flex; → Flexbox 사용

justify-content: center; → 가로 방향(주축)에서 중앙 정렬

align-items: center; → 세로 방향(교차축)에서 중앙 정렬

✅ 박스 크기 및 배치
width: 100%; → 부모 요소의 전체 너비 사용

height: 500px; → 전체 컨테이너 높이 설정*/